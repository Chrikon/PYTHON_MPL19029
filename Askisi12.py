# Author : Χρήστος Κωνσταντινίδης
# Κωδικός: ΜΠΛ19029

'''
Άσκηση 12.	Γράψτε ένα πρόγραμμα σε Python το οποίο παίρνει σαν είσοδο από το χρήστη
έναν αριθμό πιστωτικής κάρτας (16-ψηφία) και χρησιμοποιεί τον αλγόριθμο του Luhn για
να επιβεβαιώσει τον τύπο της.

Luhn Algorithm
    Η συνάρτηση που περιγράφει ο αλγόριθμος αυτός ελέγχει την ορθότητα αριθμών σε σχέση
με ένα ψηφίο ελέγχου. Το ψηφίο ελέγχου προστίθεται στο τέλος του αριθμού.
Τα βήματα που ακολουθούμε για τον ελέγχο ορθότητας ενός αριθμού είναι τα παρακάτω:
    1.  Ξεκινάμε από το δεξιότερο ψηφίο πρίν από το ψηφίο ελέγχου (το δεξιότερο στοιχείο)
    2.  Με σημείο έναρξης το εν λόγω ψηφίο (το διπλασιάζουμε) καθώς και αυτόν με τιμή
    κάθε δεύτερου ψηφίου.
    ΠΡΟΣΟΧΗ: Εάν το αποτέλεσμα του διπλασιασμού είναι μεγαλύτερο του 9 (για παράδειγμα 8 × 2 = 16)
    τότε αθροίζουμε τα δύο ψηφία μεταξύ τους (για παράδειγμα στο 16: 1 + 6 = 7, στο 18: 1 + 8 = 9).
    3. Κατόπιν αθροίζουμε όλα τα ψηφία (Σα).
    4. Το εν λόγω άθροισμα (Σα) το πολλαπλασιάζουμε με το 9
    5. Το προκύπτων γινόμενο (Γ) το διαιρούμε με το δεκά (10) ,αν το υπόλοιπο τις διαίρεσεις είναι
    (modulo) 0 τότε το γινομενο είναι ορθό κατά Luhn.
Ας πάρουμε το παράδειγμα ενός λογαριασμού ο οποίος έχει τον αριθμό "79927398713", σε αυτόν τον αριθμό θέλουμε να προσθέσουμε ένα παραπάνω ψηφίο, το ψηφίο ελέγχου x, με το οποίο ο αλγόριθμος του Λουν θα ελέγχει την ορθότητα.: 7992739871x:

             Αριθμός λογαριασμού	7	9	9	2	7	3	9	8	7	1	3
Διπλασιάζουμε κάθε δεύτερο ψηφίο	7	18	9	4	7	6	9	16	7	2	3
             Άθροισμα των ψηφίων	7	9	9	4	7	6	9	7	7	2	3 =70

Έτσι Σα=70 αρά Γ=Σα*9=630 αρά δ=630 modulud 10 =0 (άρα ο αριθμός είναι έγκυρος κατα Luhn
Πολλαπλασίασε με 9 (9*67=603).
'''
a =list()
ascii=[i for i in range(48,58)]
accept=True
#print(ascii)
#Εισαγωγή δεδομένων από τον χρήστη
while(True):
    a =list()
    num=input ("Enter a 16-digit card number :")
    for chr in num:
        #έλεγχος αν ο χαρακτήρας είναι αριθμός ή όχι
        if(ord(chr) in ascii):
            print(f"{chr!a} character recognized and accepted")
            a.append(int(chr))
        else:
            print(f"The character {chr!a} is alphanummeric and input is rejected")
            accept=False
    b=len(a)
    #έλεγχος αν οι αριθμοί έχουν μήκος 16
    if (accept and b==16):
        print("Correct  length of digiti's.")
        break
    else:
        print(f"Wrong length of digit's {a},please try again")
#Implementing Luhn algorithm
#Βήμα 1ον: Ξεχώρισμα του control element
print(f"Control element:{a[-1]}")
#Βήμα 2ον διπλασσσιασμός των στοιχείων και άθροισή τους αν είναι πάνω από 9
for i in range(-2,-(len(a)+1),-2):
    print(f"Πρός διπλασιασμό:{a[i]}")
    a[i]=2*a[i]
    if(a[i]>9):
        temp=list(str(a[i]))
        a[i]=int(temp[0])+int(temp[1])
#Βήμα 3ον- Τελική άθροιση
print(a)
sum=0
for i in a:
    sum=sum+i
print(f"The sum of the rest elements is {sum}")
#Βήμα 4ον - Τελικό βήμα:
if((sum*9)%10==0):
    print("Number seems to be rignt")
else:
    print("The number is not right according to Luhn")